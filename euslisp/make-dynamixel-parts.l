;;
;; create-geometry for dynamixel xm430
;;
(defun make-dynamixel-xm430 ()
  (let ((bd (make-cube 28.5 46.5 34))
        (h1  (make-cylinder 9.75 2 :segments 32))
        (h1p (make-cylinder 4 4 :segments 12)) ;; xxx

        (h2  (make-cylinder 9.75 2 :segments 32))
        (h2m (make-cylinder 5 2 :segments 12)) ;; hole

        holes
        )
    (send h1p :translate (float-vector 0 0 1))
    (setq h1 (body+ h1 h1p))
    (send h1 :translate (float-vector 0 0 17))

    (send h2m :translate (float-vector 0 0 1.2))
    (setq h2 (body- h2 h2m))
    (send h2 :translate (float-vector 0 0 -17))
    (send h2 :rotate pi :x)
    (send bd :translate-vertices (float-vector 0 -12 0))

    ;; zz holes
    (let ((zz (* 34 0.5))
          (cntr 0)
          )
      (dolist (pp (list (float-vector  11  8  zz)
                        (float-vector -11  8  zz)
                        (float-vector  11 -8  zz)
                        (float-vector -11 -8  zz)
                        (float-vector  11 -32 zz)
                        (float-vector -11 -32 zz)))
        (push (send (make-cube 2.5 2.5 8) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 7) cntr) :z)
        (incf cntr)
        )
      (setq zz (* 34 -0.5))
      (dolist (pp (list (float-vector  11  8  zz)
                        (float-vector -11  8  zz)
                        ;;(float-vector  11 -8  zz)
                        ;;(float-vector -11 -8  zz)
                        (float-vector  11 -32 zz)
                        (float-vector -11 -32 zz)))
        (push (send (make-cube 2.5 2.5 8) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 7) cntr) :z)
        (incf cntr)
        )
      )

    ;;xx holes
    (let ((xx (* 28.5 0.5))
          (cntr 0))
      (dolist (pp (list (float-vector xx -4   6)
                        (float-vector xx -4  -6)
                        (float-vector xx -28  6)
                        (float-vector xx -28 -6)))
        (push (send (make-cube 8 2.5 2.5) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 7) cntr) :x)
        (incf cntr)
        )
      (setq xx (* 28.5 -0.5))
      (dolist (pp (list (float-vector xx -4   6)
                        (float-vector xx -4  -6)
                        (float-vector xx -28  6)
                        (float-vector xx -28 -6)))
        (push (send (make-cube 8 2.5 2.5) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 7) cntr) :x)
        (incf cntr)
        )
      )

    ;;yy holes
    (let ((yy 11.25)
          (cntr 0))
      (dolist (pp (list (float-vector  8 yy  6)
                        (float-vector  8 yy -6)
                        (float-vector -8 yy  6)
                        (float-vector -8 yy -6)))
        (push (send (make-cube 2.5 8 2.5) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 7) cntr) :y)
        (incf cntr)
        )
      (setq yy -35.25)
      (dolist (pp (list (float-vector  8 yy  6)
                        (float-vector  8 yy -6)
                        (float-vector -8 yy  6)
                        (float-vector -8 yy -6)))
        (push (send (make-cube 2.5 8 2.5) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 7) cntr) :y)
        (incf cntr)
        )
      )
    ;;
    ;;(objects (append holes (list bd)))
    (dolist (h holes)
      (setq bd (body- bd h)))
    (send bd :set-color #f( 0.25 0.25 0.25))
    (send h1 :set-color #f(0.35 0.35 0.1))
    (send h2 :set-color #f(0.35 0.35 0.1))
    (send-all (list bd h1 h2) :worldcoords)
    (list bd h1 h2)
    ))

(defun make-dynamixel-hinge (&key (horn-width 38) (width 27) (height 55) (tt 1.5)
                                  (hole-rad 4) (pad 10))
  (let ((bd  (make-cube (+ horn-width (* 2 tt)) (+ height pad)      width))
        (bdm (make-cube             horn-width  (+ height (* pad 2))  (* 2 width)))
        (bdm1 (make-cube (+ horn-width (* 4 tt)) (* 2 pad)  (* 2 width)))

        (h1 (make-cylinder 4 (+ horn-width (* 4 tt)) :segments 12))
        (h2 (make-cylinder 4 height :segments 12))
        holes
        )
    (send bdm :translate (float-vector 0 (- (+ (* 0.5 pad) tt)) 0))
    (setq bd (body- bd bdm))

    (send h2 :rotate -pi/2 :x)
    (setq bd (body- bd h2))

    (send bd :translate-vertices (float-vector 0 (* 0.5 (- height pad)) 0))

    (send h1 :rotate pi/2 :y)
    (send h1 :translate (float-vector 0 0 (- (* -0.5 horn-width) (* 2 tt))))
    (setq bd (body- bd h1))

    (send bdm1 :translate (float-vector 0 (- (- pad) 1.1) 0))
    (setq bd (body- bd bdm1))

    ;; yy holes
    (let ((yy (+ height (* 0.5 tt)))
          (cntr 0))
      (dolist (pp (list (float-vector  12 yy  6)
                        (float-vector  12 yy -6)
                        (float-vector -12 yy  6)
                        (float-vector -12 yy -6)
                        (float-vector   6 yy  8)
                        (float-vector   6 yy -8)
                        (float-vector  -6 yy  8)
                        (float-vector  -6 yy -8)
                        ))
        (push (send (make-cube 2.5 8 2.5) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 5) cntr) :y)
        (incf cntr)
        )
      )

    (dolist (h holes)
      (setq bd (body- bd h)))
    (send bd :set-color #f( 0.6 0.6 0.63))
    ;;(objects (list bd))
    (send bd :worldcoords)
    bd
    ))
(defun make-dynamixel-h101s ()
  (make-dynamixel-hinge :height 20))
(defun make-dynamixel-h101 ()
  (make-dynamixel-hinge :height 28))
(defun make-dynamixel-h103 ()
  (make-dynamixel-hinge :height 55))

(defun make-dynamixel-offset-hinge (&key (horn-width 38) (width 27) (height 28.5) (tt 1.5)
                                        (hole-rad 4) (offset 10) (pad 10) (pad4 (* pad 4)))
  (let ((bd   (make-cube (+ horn-width (* 2 tt)) (+ height pad)        (+ width offset pad)))
        (bdm  (make-cube             horn-width  (+ height (* pad 2))  (+ width offset (* 2 pad))))
        ;;
        (bdm1 (make-cube (+ horn-width (* 4 tt)) (* 2 pad)  (* 2 width)))

        (h1 (make-cylinder 4 (+ horn-width (* 4 tt)) :segments 12))
        (h2 (make-cylinder 4 height :segments 12))
        ba1
        ba2
        holes
        )
    (send bdm :translate (float-vector 0 (- (+ (* 0.5 pad) tt)) 0))
    (setq bd (body- bd bdm))

    (send bd :translate (float-vector 0 (* 0.5 (- height pad)) (* 0.5 offset)))
    (let ((aa (list (float-vector horn-width      0    (* -0.5 width))
                    (float-vector horn-width height (+ (* -0.5 width) offset))))
          (bb (list (float-vector horn-width height (+ (* 0.5 width) offset))
                    (float-vector horn-width      0    (* 0.5 width))))
          )
      (setq ba1
            (make-prism
             (list
              (v+ (scale    pad4  (normalize-vector (v- (cadr aa) (car aa))))
                  (cadr aa))
              (v+ (scale (- pad4) (normalize-vector (v- (cadr aa) (car aa))))
                  (car aa))
              (float-vector horn-width  (+ height pad4)  (- (* -0.5 width) pad4))
              )
             (float-vector (- (* 2 horn-width)) 0 0))
            ba2
            (make-prism
             (list
              (v+ (scale    pad4  (normalize-vector (v- (cadr bb) (car bb))))
                  (cadr bb))
              (v+ (scale (- pad4) (normalize-vector (v- (cadr bb) (car bb))))
                  (car bb))
              (float-vector horn-width (- 0 pad4)  (+ (* 0.5 width) offset pad4))
              )
             (float-vector (- (* 2 horn-width)) 0 0))
            )
      )
    (setq bd (body- bd ba1))
    (setq bd (body- bd ba2))

    (send h2 :translate (float-vector 0 pad offset))
    (send h2 :rotate -pi/2 :x)
    (setq bd (body- bd h2))

    (send h1 :rotate pi/2 :y)
    (send h1 :translate (float-vector 0 0 (- (* -0.5 horn-width) (* 2 tt))))
    (setq bd (body- bd h1))

    (send bdm1 :translate (float-vector 0 (- (- pad) 1.1) 0))
    (setq bd (body- bd bdm1))

    ;; yy holes
    (let ((yy (+ height (* 0.5 tt)))
          (cntr 0))
      (dolist (pp (list (float-vector  12 yy (+ offset  6))
                        (float-vector  12 yy (+ offset -6))
                        (float-vector -12 yy (+ offset  6))
                        (float-vector -12 yy (+ offset -6))
                        (float-vector   6 yy (+ offset  8))
                        (float-vector   6 yy (+ offset -8))
                        (float-vector  -6 yy (+ offset  8))
                        (float-vector  -6 yy (+ offset -8))
                        ))
        (push (send (make-cube 2.5 8 2.5) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 11) cntr) :y)
        (incf cntr)
        )
      )

    (dolist (h holes)
      (setq bd (body- bd h)))
    (send bd :set-color #f( 0.6 0.6 0.63))
    ;;(objects (append (list bd) holes))
    (send bd :worldcoords)
    bd
    ))

(defun make-dynamixel-s102 (&key (depth 34) (width 28) (tt 1.5) (height 11.5) (offset 19.5)
                                (hole-height 8.5) (pad 10))
  (let ((bd  (make-cube (+ depth (* 2 tt))     width         height))
        (bdm (make-cube    depth            (+ width pad) (+ height pad)))
        (h1 (make-cylinder 4 pad :segments 12))
        holes
        )
    (send bdm :translate (float-vector 0 0 (- (+ tt (* 0.5 pad)))))
    (setq bd (body- bd bdm))
    (send bd :translate-vertices (float-vector 0 0 (- offset (* 0.5 height))))

    ;; xx holes
    (let ((xx (* 0.5 (+ depth tt)))
          (cntr 0))
      (dolist (pp (list (float-vector    xx   11 11)
                        (float-vector    xx  -11 11)
                        (float-vector (- xx)  11 11)
                        (float-vector (- xx) -11 11)
                        ))
        (push (send (make-cube 8 2.5 2.5) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 5) cntr) :x)
        (incf cntr)
        )
      )

    ;; zz holes
    (let ((zz offset)
          (cntr 0))
      (dolist (pp (list (float-vector  12  6 zz)
                        (float-vector  12 -6 zz)
                        (float-vector -12  6 zz)
                        (float-vector -12 -6 zz)
                        (float-vector   6  8 zz)
                        (float-vector   6 -8 zz)
                        (float-vector  -6  8 zz)
                        (float-vector  -6 -8 zz)
                        ))
        (push (send (make-cube 2.5 2.5 8) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 5) cntr) :z)
        (incf cntr)
        )
      )

    (send h1 :translate (float-vector 0 0 (- offset (* 0.5 pad))))
    (setq bd (body- bd  h1))

    (dolist (h holes)
      (setq bd (body- bd h)))
    (send bd :set-color #f( 0.6 0.6 0.63))
    ;;(objects (list bd))
    (send bd :worldcoords)
    bd
    ))
(defun make-dynamixel-s101 (&key (depth 34) (width 46) (tt 1.5) (height 11) (offset 19.5)
                                 (hole-height 8.5) (pad 10))
  (let ((bd  (make-cube (+ depth (* 2 tt))     width         height))
        (bdm (make-cube    depth            (+ width pad) (+ height pad)))
        (h1 (make-cylinder 4 pad :segments 12))
        (h2 (make-cylinder 4 pad :segments 12))
        holes
        )
    (send bdm :translate (float-vector 0 0 (- (+ tt (* 0.5 pad)))))
    (setq bd (body- bd bdm))
    (send bd :translate-vertices (float-vector 0 -12 (- offset (* 0.5 height))))

    ;; xx holes
    (let ((xx (* 0.5 (+ depth tt)))
          (cntr 0))
      (dolist (pp (list (float-vector    xx    8 (- offset hole-height))
                        (float-vector    xx  -32 (- offset hole-height))
                        (float-vector (- xx)   8 (- offset hole-height))
                        (float-vector (- xx) -32 (- offset hole-height))
                        ))
        (push (send (make-cube 8 2.5 2.5) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 5) cntr) :x)
        (incf cntr)
        )
      )
    ;; zz holes
    (let ((zz offset)
          (cntr 0))
      (dolist (pp (list (float-vector  12  6 zz)
                        (float-vector  12 -6 zz)
                        (float-vector -12  6 zz)
                        (float-vector -12 -6 zz)
                        (float-vector   6  8 zz)
                        (float-vector   6 -8 zz)
                        (float-vector  -6  8 zz)
                        (float-vector  -6 -8 zz)
                        ))
        (push (send (make-cube 2.5 2.5 8) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 11) cntr) :z)
        (incf cntr)
        )
      )
    (let ((zz offset)
          (cntr 0))
      (dolist (pp (list (float-vector  12  6 zz)
                        (float-vector  12 -6 zz)
                        (float-vector -12  6 zz)
                        (float-vector -12 -6 zz)
                        (float-vector   6  8 zz)
                        (float-vector   6 -8 zz)
                        (float-vector  -6  8 zz)
                        (float-vector  -6 -8 zz)
                        ))
        (push (send (make-cube 2.5 2.5 8) :translate (v+ pp (float-vector 0 -24 0))) holes)
        (send (car holes) :rotate (* (/ pi/2 7) cntr) :z)
        (incf cntr)
        )
      )

    (send h1 :translate (float-vector 0   0 (- offset (* 0.5 pad))))
    (setq bd (body- bd  h1))
    (send h2 :translate (float-vector 0 -24 (- offset (* 0.5 pad))))
    (setq bd (body- bd  h2))
    (dolist (h holes)
      (setq bd (body- bd h)))
    (send bd :set-color #f( 0.6 0.6 0.63))
    ;;(objects (append (list bd) holes))
    (send bd :worldcoords)
    bd
    ))

(defun make-dynamixel-s103 (&key (depth 20) (width 31.5) (tt 1.5) (height 46.5)
                                 (offset 16.75) ;; type-b
                                 ;; (offset 16.75) ;; type-a
                                 (hole-height 10) (pad 10)
                                 (type :type-a))
  (let ((bd  (make-cube    width               height         depth))
        (bdm (make-cube (- width (* 2 tt))  (+ height pad) (+ depth pad)))
        (h1 (make-cylinder 4 pad :segments 12))
        (h2 (make-cylinder 4 pad :segments 12))
        holes
        )
    (send bdm :translate (float-vector 0 0 (- (+ tt (* 0.5 pad)))))
    (setq bd (body- bd bdm))

    (send bd :translate-vertices (float-vector 0 -12 (- (* 0.5 depth))))

    ;; xx holes
    (let ((xx (* 0.5 (+ width tt)))
          (cntr 3))
      (dolist (pp (list (float-vector    xx   -4 (- offset))
                        (float-vector    xx  -28 (- offset))
                        (float-vector (- xx)  -4 (- offset))
                        (float-vector (- xx) -28 (- offset))
                        ))
        (push (send (make-cube 8 2.5 2.5) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 7) cntr) :x)
        (incf cntr)
        )
      )

    ;; zz holes
    (let ((zz (* -0.5 tt))
          (cntr 0))
      (dolist (pp (list (float-vector  12  6 zz)
                        (float-vector  12 -6 zz)
                        (float-vector -12  6 zz)
                        (float-vector -12 -6 zz)
                        (float-vector   6  8 zz)
                        (float-vector   6 -8 zz)
                        (float-vector  -6  8 zz)
                        (float-vector  -6 -8 zz)
                        ))
        (push (send (make-cube 2.5 2.5 8) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 11) cntr) :z)
        (incf cntr)
        )
      )
    (let ((zz (* -0.5 tt))
          (cntr 0))
      (dolist (pp (list (float-vector  12  6 zz)
                        (float-vector  12 -6 zz)
                        (float-vector -12  6 zz)
                        (float-vector -12 -6 zz)
                        (float-vector   6  8 zz)
                        (float-vector   6 -8 zz)
                        (float-vector  -6  8 zz)
                        (float-vector  -6 -8 zz)
                        ))
        (push (send (make-cube 2.5 2.5 8) :translate (v+ pp (float-vector 0 -22 0))) holes)
        (send (car holes) :rotate (* (/ pi/2 7) cntr) :z)
        (incf cntr)
        )
      )
    (send h1 :translate (float-vector 0  0 (- (* 0.5 pad))))
    (setq bd (body- bd  h1))
    (send h2 :translate (float-vector 0 -22 (- (* 0.5 pad))))
    (setq bd (body- bd  h2))
    (dolist (h holes)
      (setq bd (body- bd h)))
    (case type
      (:type-a
       (let* ((wh 14)
              (cb (make-cube 100 24.5 wh)))
         (send cb :translate (float-vector 0 0 (- (+ 1 (* 0.5 wh) tt))))
         (setq bd (body- bd cb))
         )
       )
      (:type-b
       (let ((cb (make-cube 100 25 26)))
         (send cb :translate (float-vector 0 1 0))
         (setq bd (body- bd cb))
         ))
      )
    (send bd :set-color #f( 0.6 0.6 0.63))
    ;;(objects (append (list bd) holes))
    (send bd :worldcoords)
    bd
    ))

(defun make-dynamixel-x102 (&key ;;(depth 25.85)
                                (depth 22.35)
                                 (width 28.5) (tt 2) (height 34) (offset 25.85)
                                 (hole-height 10) (pad 10))
  (let ((bd   (make-cube (+ width (* tt 2))   depth          height))
        (bdm  (make-cube    width          (+ depth pad)  (+ height pad)))
        (bdm2 (make-cube (* width 2) 14 (* 2 (- 34 15))))
        holes)
    (send bdm :translate (float-vector 0 (- (+ tt (* 0.5  pad))) 0))
    (setq bd (body- bd bdm))

    (send bd :translate-vertices (float-vector 0 (* 0.5 depth) (* 0.5 height)))
    (send bdm2 :translate (float-vector 0 (- depth tt 0.5 (* 0.5 14)) 0))
    (setq bd (body- bd bdm2))
      ;; xx holes
    (let ((xx (* 0.5 (+ width tt)))
          (cntr 0))
      (dolist (pp (list (float-vector    xx    3  4)
                        (float-vector    xx    3 28)
                        (float-vector (- xx)   3  4)
                        (float-vector (- xx)   3 28)
                        ))
        (push (send (make-cube 8 2.5 2.5) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 5) cntr) :x)
        (incf cntr)
        )
      )
        ;; yy holes
    (let ((yy depth)
          (cntr 0))
      (dolist (pp (list (float-vector  6 yy  4)
                        (float-vector  6 yy 28)
                        (float-vector -6 yy  4)
                        (float-vector -6 yy 28)
                        ))
        (push (send (make-cube 2.5 8 2.5) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 5) cntr) :y)
        (incf cntr)
        )
      )

    (dolist (h holes)
      (setq bd (body- bd h)))
    (send bd :set-color #f( 0.6 0.6 0.63))
    ;;(objects (append (list bd bdm2) holes))
    (send bd :worldcoords)
    bd
    ))

(defun make-dynamixel-x103 (&key (depth 34) (width 31) (tt 1.5) (height 30)  ;; height 31
                                 (hole-height 10) (pad 10))
  (let ((bd  (make-cube    width      (+ depth (* 2 tt))     height))
        (bdm (make-cube (+ width pad)    depth            (+ height pad)))
        (h1 (make-cylinder 4 pad :segments 12))
        holes)
    (send bdm :translate (float-vector (- (+ tt (* 0.5 pad))) 0 (- (+ tt (* 0.5 pad)))))
    (setq bd (body- bd bdm))

    (send bd :translate-vertices (float-vector -0.25 0 (* -0.5 height)))

    ;;(send h1 :rotate -pi/2 :x)
    (send h1 :translate (float-vector 0 0 (* -0.5 pad)))
    (setq bd (body- bd h1))
    ;; xx holes
    (let ((xx (* 0.5 (+ height tt)))
          (cntr 3))
      (dolist (pp (list (float-vector xx  6 -27.15)
                        (float-vector xx -6 -27.15)
                        ))
        (push (send (make-cube 8 2.5 2.5) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 13) cntr) :x)
        (incf cntr)
        )
      )
    ;; yy holes
    (let ((yy (* 0.5 (+ depth tt)))
          (cntr 0))
      (dolist (pp (list (float-vector  11    yy  -23.15)
                        (float-vector -11    yy  -23.15)
                        (float-vector  11 (- yy) -23.15)
                        (float-vector -11 (- yy) -23.15)
                        ))
        (push (send (make-cube 2.5 8 2.5) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 11) cntr) :y)
        (incf cntr)
        )
      )
    ;; zz holes
    (let ((zz (+  (* 0.5 tt)))
          (cntr 0))
      (dolist (pp (list (float-vector  6  12 zz)
                        (float-vector  6 -12 zz)
                        (float-vector -6  12 zz)
                        (float-vector -6 -12 zz)
                        ;;
                        (float-vector  8  6 zz)
                        (float-vector  8 -6 zz)
                        (float-vector -8  6 zz)
                        (float-vector -8 -6 zz)
                        ))
        (push (send (make-cube 2.5 2.5 8) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 5) cntr) :z)
        (incf cntr)
        )
      )
    (dolist (h holes)
      (setq bd (body- bd h)))
    (send bd :set-color #f( 0.6 0.6 0.63))
    ;;(objects (append (list bd) holes))
    (send bd :worldcoords)
    bd
    ))
(defun make-dynamixel-f101 (&key (depth 25.85) (width 20) (tt 2) (height 32) (offset 25.85)
                                 (hole-height 10) (pad 10))
  (let ((bd (make-cube width tt height))
        (h2  (make-cylinder 9.75 2 :segments 32))
        (h2m (make-cylinder 5 2 :segments 12)) ;; hole

        holes
        )
    (send h2m :translate (float-vector 0 0 1.2))
    (setq h2 (body- h2 h2m))
    (send h2 :rotate -pi/2 :x)
    (send h2 :translate (float-vector 0 2.65 0) :world)

    (send bd :translate-vertices (float-vector 0 (* 0.5 tt) (* 0.5 height)))

    ;; yy holes
    (let ((yy (* 0.5 tt))
          (cntr 0))
      (dolist (pp (list (float-vector  6 yy  4)
                        (float-vector  6 yy 28)
                        (float-vector -6 yy  4)
                        (float-vector -6 yy 28)
                        ))
        (push (send (make-cube 2.5 8 2.5) :translate pp) holes)
        (send (car holes) :rotate (* (/ pi/2 5) cntr) :y)
        (incf cntr)
        )
      )

    (dolist (h holes)
      (setq bd (body- bd h)))
    (send bd :set-color #f( 0.6 0.6 0.63))
    (send h2 :set-color #f(0.35 0.35 0.1))
    ;;(objects (append (list bd h2) holes))
    (send-all (list bd h2) :worldcoords)
    (list bd h2)
    ))

(defun make-dynamixel-e170 (&optional (len 45.0));; org => 52.0
  (let ((prm
         (make-prism
          (reverse
          (list
           (float-vector   0  0 -17)
           (float-vector len  0 -17)
           (float-vector (+ len 11.5)  9.6 -17)
           (float-vector (+ len  9.5) 12.4 -17)
           (float-vector len  4 -17)
           (float-vector   0  4 -17))
          )
          (float-vector 0  0 34)))
        (cb1 (make-cube 80 40 80))
        (cb2 (make-cube 80 40 80))
        (finger (make-dynamixel-s102))
        )
    (send cb1 :translate (float-vector 40 0  40))
    (send cb2 :translate (float-vector 40 0 -40))

    (send cb1 :translate (float-vector 18 0  11)) ;; 39 -> 18 wider range / 11 narrow width
    (send cb2 :translate (float-vector 18 0 -11))

    (setq prm (body- prm cb1))
    (setq prm (body- prm cb2))

    (send prm :rotate -pi/2 :y)
    (send prm :rotate -pi/2 :x :world )

    (send prm :translate (float-vector 0 14 19.5) :world)

    (send finger :set-color (float-vector 0.5 0.45 0.45))
    (send prm :set-color (float-vector 0.5 0.45 0.45))
    ;;(objects (list finger prm))
    (send-all (list finger prm) :worldcoords)
    (list finger prm)
    ))

(defun make-dynamixel-e171 (&optional (len 58.0) (hole-len 56)) ;; org 45/40
  (let ((bd (make-dynamixel-offset-hinge :height 21 :offset 8))
        (prm
         (make-prism
          (reverse
          (list
           (float-vector   0  0 -27)
           (float-vector len  0 -27)
           (float-vector (+ len 15.5)  9.6 -27)
           (float-vector (+ len 13.5) 11.4 -27)
           (float-vector len  3 -27)
           (float-vector   0  3 -27))
          )
          (float-vector 0  0 54)))
        (cb1 (make-cube hole-len 200 24))
        )

    (send cb1 :translate (float-vector (* 0.5 (+ len 13.5)) 0 0))
    (setq prm (body- prm cb1))
    ;;
    (send prm :rotate -pi/2 :y)
    (send prm :rotate pi :z :world)
    (send prm :translate (float-vector 0 21 21) :world)
    (send prm :rotate 0.4 :z)
    ;;
    (send bd :set-color (float-vector 0.5 0.45 0.45))
    (send prm :set-color (float-vector 0.5 0.45 0.45))

    ;;(objects (list bd prm ))
    (send-all (list bd prm ) :worldcoords)
    (list bd prm )
    ))

(defun dump-mesh-file-from-bodies (bd fname)
  (let (glv)
    (cond
     ((atom bd)
      (send bd :worldcoords)
      (setq glv (gl::make-glvertices-from-faceset bd)))
     (t
      (let ((glv-lst
             (mapcar #'(lambda (x) (send x :worldcoords)
                         (gl::make-glvertices-from-faceset x)) bd)))
        (send-all glv-lst :worldcoords)
        (send (car glv-lst) :append-glvertices (cdr glv-lst))
        (setq glv (car glv-lst))
        ))
     )
    ;;(objects (list glv))
    (send glv :worldcoords)
    (save-mesh-file fname glv :scale 0.001)
    ))

(defun body-parts-a ()
  (let ((bd  (make-cube 58 98 80));; +7 xx +10
        (bdm (make-cube 54 94 80));;
        (h1 (make-cylinder 10 100) :segments 13)
        (h2 (make-cylinder 10 100) :segments 13)
        (h3 (make-cylinder 10 200) :segments 13)
        ;(h4 (make-cylinder 10 400) :segments 13)
        )
    (send bdm :translate (float-vector 0 0 2))
    (setq bd (body- bd bdm))
    ;; bottom
    (send h1 :translate (float-vector 12  32 -80))
    (send h2 :translate (float-vector 12 -32 -80))
    (send h1 :rotate (/ pi/2 31) :z)
    (setq bd (body- bd h1))
    (setq bd (body- bd h2))
    ;; side
    (send h3 :rotate pi/2 :x)
    (send h3 :translate (float-vector 0 0 -100))
    (send h3 :translate (float-vector 12 0 25) :world)
    ;;(objects (list bd ))
    (setq bd (body- bd h3))
    (send bd :set-color #f(0.6 0.6 0.55))
    bd
    ))

(defun body-parts-b ()
  (let ((bd  (make-cube 40 88 100))
        (bdm (make-cube 36 84 102))
        ;;(h1 (make-cylinder 10 100) :segments 13)
        ;;(h2 (make-cylinder 10 100) :segments 13)
        (h3 (make-cylinder 10 200) :segments 13)
        (h4 (make-cylinder 10 200) :segments 13)
        )
    (setq bd (body- bd bdm))

    (send h4 :rotate -pi/2 :y)
    (send h4 :translate (float-vector 0 27 36) :world)
    (setq bd (body- bd h4))

    (send h4 :translate (float-vector 0 0 -72) :world)
    (send h4 :rotate 0.1 :z)
    (setq bd (body- bd h4))

    (send h4 :rotate 0.1 :z)
    (send h4 :translate (float-vector 0 -54 0) :world)
    (setq bd (body- bd h4))

    (send h4 :rotate 0.1 :z)
    (send h4 :translate (float-vector 0 0 72) :world)
    (setq bd (body- bd h4))

    (send h3 :rotate pi/2 :x)
    (send h3 :translate (float-vector 0 0 -100))
    (send h3 :translate (float-vector 3 0  36) :world)
    (setq bd (body- bd h3))

    (send h3 :rotate 0.1 :z)
    (send h3 :translate (float-vector 0 0 -72) :world)
    (setq bd (body- bd h3))

    (send bd :set-color #f(0.6 0.6 0.55))
    bd
    ))
;;
(defun body-parts-a-new ()
  (let ((bd  (make-cube 58 106 90));; +7 xx +10
        (bdm (make-cube 54 102 90));;
        (h1 (make-cylinder 10 120) :segments 13)
        (h2 (make-cylinder 10 120) :segments 13)
        (h3 (make-cylinder 10 240) :segments 13)
        ;(h4 (make-cylinder 10 400) :segments 13)
        )
    (send bdm :translate (float-vector 0 0 2))
    (setq bd (body- bd bdm))
    ;; bottom
    (send h1 :translate (float-vector 12  33 -90))
    (send h2 :translate (float-vector 12 -33 -90))
    (send h1 :rotate (/ pi/2 31) :z)
    (setq bd (body- bd h1))
    (setq bd (body- bd h2))
    ;; side
    (send h3 :rotate pi/2 :x)
    (send h3 :translate (float-vector 0 0 -120))
    (send h3 :translate (float-vector 12 0 30) :world)
    ;;(objects (list bd ))
    (setq bd (body- bd h3))
    (send bd :set-color #f(0.6 0.6 0.55))
    bd
    ))

(defun make-wheel-parts (&key (radius 20.0) (width 8) (segments 32))
  (let ((cyl (make-cylinder radius width :segments segments))
        (cyl1 (make-cylinder 5 2 :segments 12))
        )
    (send cyl :translate (float-vector 0 0 2))
    (send cyl  :set-color #f(0.1 0.1 0.35))
    (send cyl1 :set-color #f(0.1 0.1 0.35))
    (list cyl cyl1)
    ))
#|
;;; create files
(load "package://eus_assimp/euslisp/eus-assimp.l")
;;
(dump-mesh-file-from-bodies (make-dynamixel-xm430) "xm430_dynamixel.dae")
;;
(dump-mesh-file-from-bodies (make-dynamixel-h101) "fr12_h101.dae")
(dump-mesh-file-from-bodies (make-dynamixel-offset-hinge) "fr12_h102.dae")
(dump-mesh-file-from-bodies (make-dynamixel-h103) "fr12_h103.dae")
;;
(dump-mesh-file-from-bodies (make-dynamixel-s101) "fr12_s101.dae")
(dump-mesh-file-from-bodies (make-dynamixel-s102) "fr12_s102.dae")
;;(dump-mesh-file-from-bodies (make-dynamixel-s103) "fr12_s103.dae")
(dump-mesh-file-from-bodies (make-dynamixel-s103 :type :type-b) "fr12_s103_b.dae")
(dump-mesh-file-from-bodies (make-dynamixel-s103 :type :type-a :depth 22.5 :offset 19.5) "fr12_s103_a.dae")
;;
(dump-mesh-file-from-bodies (make-dynamixel-x102) "fr12_x102.dae")
(dump-mesh-file-from-bodies (make-dynamixel-x103) "fr12_x103.dae")
;;
(dump-mesh-file-from-bodies (make-dynamixel-f101) "hr12_f101.dae")
;;
(dump-mesh-file-from-bodies (make-dynamixel-e171) "fr12_e171.dae")
(dump-mesh-file-from-bodies (make-dynamixel-e170) "fr12_e170.dae")
;;
(dump-mesh-file-from-bodies (body-parts-a) "body-parts-a.dae")
(dump-mesh-file-from-bodies (body-parts-b) "body-parts-b.dae")
;; new parts
(dump-mesh-file-from-bodies (make-dynamixel-h101s) "fr12_h101s.dae")
(dump-mesh-file-from-bodies (body-parts-a-new) "body-parts-a-new.dae")
(dump-mesh-file-from-bodies (make-wheel-parts) "../meshes/wheel_parts.dae")
;;
(defun initial-mass-param (parts mass)
  (labels ((make-box-inertia
            (mass xx yy zz)
            (let ((ret (make-matrix 3 3)))
              (setf (aref ret 0 0) (/ (* mass (+ (* yy yy) (* zz zz))) 12))
              (setf (aref ret 1 1) (/ (* mass (+ (* xx xx) (* zz zz))) 12))
              (setf (aref ret 2 2) (/ (* mass (+ (* yy yy) (* xx xx))) 12))
              (setq ret (scale 1e-9 (array-entity ret)))

              (format t "inertia-tensor: [~A, ~A, ~A,  ~A, ~A, ~A,  ~A, ~A, ~A]~%"
                      (elt ret 0) (elt ret 1) (elt ret 2)
                      (elt ret 3) (elt ret 4) (elt ret 5)
                      (elt ret 6) (elt ret 7) (elt ret 8))
              )))
    (let* ((bb
            (make-bounding-box (send (car (send parts :bodies)) :vertices) 0.0))
           (size (send bb :diagonal))
           (cent (scale 0.001 (send bb :center)))
           (xx (elt size 0))
           (yy (elt size 1))
           (zz (elt size 2))
           )
      (format t "## ~A~%" (parts . type))
      (format t "mass: ~A~%" (* 0.001 mass))
      (format t "center-of-mass: [~A, ~A, ~A]~%" (elt cent 0) (elt cent 1) (elt cent 2))
      (make-box-inertia mass xx yy zz)
      )))
|#
